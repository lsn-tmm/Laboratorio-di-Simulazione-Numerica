//test cities
  //for (auto k : cr.get_city() ) cout << k.first << " " << k.second << endl;
  
  // for (uint i=0;i<100;i++)   
    //cout << (int)(pow( (double)rand()/RAND_MAX, 1.2) *P.get_route().size()) << endl;
    //cout << sq.Rannyu() << " " << cr.Rannyu() << endl;

  
  //test genetic mutations
  /*
  for (auto el : P.get_route()[0].get_DNA() ) cout << el << " ";
  cout << endl;

  
  //P.get_route()[0].shift(2,10);
  //P.get_route()[0].reverse(6);
  //P.get_route()[0].permutation(6);
  for (auto el : P.get_route()[0].get_DNA() ) cout << el << " ";
  cout << endl;
  

  for(uint i=0;i<10;i++){
    P.add_to_newgen(P.get_route()[0]);
    for (auto k : P.get_newgen()[i].get_DNA() ) cout << k << " ";
    cout << endl;
  }
  */
  
  //test avarage best half
  //cout << P.average_best_half_l1() << endl;

  //test crossover
  /*
  for (auto el : P.get_route()[0].get_DNA() ) cout << el << " ";
  cout << endl;
  for (auto el : P.get_route()[1].get_DNA() ) cout << el << " ";
  cout << endl;

  P.crossover(P.get_route()[0],P.get_route()[1]);

  for (auto el : P.get_newgen()[0].get_DNA() ) cout << el << " ";
  cout << endl;
  for (auto el : P.get_newgen()[1].get_DNA() ) cout << el << " ";
  cout << endl;
  */

//Print generation
  /*
  for (auto &el : P.get_route() ){
    el.set_l1( sq.L1(el.get_DNA()) );
    for (auto &k : el.get_DNA() ) cout << k << " ";
    cout << el.get_l1() << endl;
  }
  */
